package com.hms.roommanagement.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hms.roommanagement.models.Reservation;
import com.hms.roommanagement.models.Room;
import com.hms.roommanagement.repositories.ReservationRepository;
import com.hms.roommanagement.repositories.RoomRepository;

@Service
public class RoomServiceImplementation implements RoomService {

	@Autowired
	private RoomRepository roomRepository;

	@Autowired
	private ReservationRepository reservationRepository;

	public void addRoom(Room room) {
		roomRepository.save(room);
	}

	public List<Room> getRooms() {
		return roomRepository.findAll();
	}

	public Optional<Room> getRoomDetailsById(String id) {
		return roomRepository.findById(id);
	}

	public Room updateRoom(String id, Room room) {

		Optional<Room> findById = roomRepository.findById(id);
		System.out.println(findById);
		if (findById.isPresent()) {
			Room userEntity = findById.get();
			if (room.getCode() != null)

				userEntity.setCode(room.getCode());
			userEntity.setRoomInfo(room.getRoomInfo());
			userEntity.setRoomPrice(room.getRoomPrice());
			userEntity.setStatus(room.getStatus());

			return roomRepository.save(userEntity);
		}
		return null;

	}

	public void deleteRoom(String id) {
		roomRepository.deleteById(id);
	}

	// Make Reservation for Guests
	@SuppressWarnings("unlikely-arg-type")
	public void makeReservation(Reservation reservation) {

		List<Room> rmc = roomRepository.findByCode(reservation.getRoomId());

//		List<Room> roomCode = roomRepository.findByCode(reservation.getRoomId());

		System.out.println( rmc.forEach(e->e.getStatus()) );
		
		if ( rmc.contains(reservation.getStatus().equalsIgnoreCase("available")) ) {
			reservationRepository.save(reservation);

			List<Room> roomCode = roomRepository.findByCode(reservation.getRoomId());
			if (!reservation.getRoomId().isEmpty()) {
				roomCode.forEach(e -> e.setStatus("unavailable"));
				roomRepository.saveAll(roomCode);
			}
		} else {
			System.out.println("fail");
			System.out.println(rmc.contains(roomRepository.findByStatus("available")));
			System.out.println(rmc.equals(roomRepository.findByStatus("available")));
//			System.out.println(roomRepository.findByStatus("available"));

		}

	}

	public List<Room> getAvailableRooms() {
		return roomRepository.getAvailableRooms();
	}

}
